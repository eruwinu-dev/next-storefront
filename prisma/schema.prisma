generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  stores        Store[]
  Order         Order[]
  Address       Address[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  images      String[]
  userId      String    @db.ObjectId
  quantity    Int       @default(1)
  price       Float     @default(1.00)
  createdAt   DateTime  @default(now())
  storeId     String    @db.ObjectId
  discount    Float?    @default(1.0)
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variants    Variant[]
  Order       Order[]
}

model Order {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String          @map("user_id") @db.ObjectId
  User      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  variantId String          @db.ObjectId
  Variant   Variant?        @relation(fields: [variantId], references: [id])
  groupId   String
  quantity  Int             @default(1)
  status    OrderStatus     @default(CART)
  progress  OrderProgress[]
  productId String          @map("product_id") @db.ObjectId
  Product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  updatedAt DateTime        @default(now())
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  orderId   String   @db.ObjectId
  comment   String
  images    String[]
  createdAt DateTime @default(now())
  score     Int      @default(5)
}

model Store {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  userId      String          @db.ObjectId
  name        String
  description String
  status      StoreStatus     @default(VALIDATION)
  progress    StoreProgress[]
  image       String          @default("none")
  User        User            @relation(fields: [userId], references: [id])
  products    Product[]
}

model Variant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  name      String
  image     String  @default("none")
  price     Float   @default(1.00)
  product   Product @relation(fields: [productId], references: [id])
  Order     Order[]
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  label       String
  name        String
  phone       String
  addressLine String
  isDefault   Boolean @default(false)
  postalCode  Int     @default(1)
  streetName  String
  User        User    @relation(fields: [userId], references: [id])
  coordinates String?
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum OrderStatus {
  CART
  VALIDATION
  SHIPMENT
  DELIVERY
  PAYMENT
  COMPLETE
  RETURN
  CANCELLATION
}

enum StoreStatus {
  VALIDATION
  BUSINESS
}

type OrderProgress {
  status      OrderStatus
  destination String?
  current     String?
  date        DateTime    @default(now())
}

type StoreProgress {
  status StoreStatus
  date   DateTime    @default(now())
}
