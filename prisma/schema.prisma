generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  orders        Order[]
  items         Item[]
  stores        Store[]
  ratings       Rating[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  images      String[]
  Order       Order[]
  quantity    Int       @default(1)
  price       Float     @default(1.00)
  variants    Variant[]
  userId      String    @map("user_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  storeId     String    @map("store_id") @db.ObjectId
  store       Store?    @relation(fields: [storeId], references: [id])
  discount    Float     @default(1.0)
}

model Order {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  userId   String          @map("user_id") @db.ObjectId
  user     User?           @relation(fields: [userId], references: [id])
  groupId  String
  itemId   String          @map("item_id") @db.ObjectId
  item     Item?           @relation(fields: [itemId], references: [id])
  quantity Int             @default(1)
  status   OrderStatus
  progress OrderProgress[]
  ratings  Rating[]
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  orderId   String   @map("order_id") @db.ObjectId
  order     Order?   @relation(fields: [orderId], references: [id])
  comment   String
  images    String[]
  createdAt DateTime @default(now())
  score     Int      @default(5)
}

model Store {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  userId      String          @map("user_id") @db.ObjectId
  user        User?           @relation(fields: [userId], references: [id])
  name        String
  description String
  items       Item[]
  status      StoreStatus
  progress    StoreProgress[]
}

model Variant {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  itemId      String @map("item_id") @db.ObjectId
  item        Item?  @relation(fields: [itemId], references: [id])
  name        String
  description String
  image       String
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum OrderStatus {
  CART
  VALIDATION
  SHIPMENT
  DELIVERY
  PAYMENT
}

enum StoreStatus {
  DRAFT
  VALIDATION
  BUSINESS
}

type OrderProgress {
  status OrderStatus
  date   DateTime    @default(now())
}

type StoreProgress {
  status StoreStatus
  date   DateTime    @default(now())
}
